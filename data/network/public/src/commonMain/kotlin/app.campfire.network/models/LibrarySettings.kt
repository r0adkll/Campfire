/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package app.campfire.network.models


import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * The settings for the library.
 *
 * @param coverAspectRatio Whether the library should use square book covers. Must be 0 (for false) or 1 (for true).
 * @param disableWatcher Whether to disable the folder watcher for the library.
 * @param skipMatchingMediaWithAsin Whether to skip matching books that already have an ASIN.
 * @param skipMatchingMediaWithIsbn Whether to skip matching books that already have an ISBN.
 * @param autoScanCronExpression The cron expression for when to automatically scan the library folders. If null, automatic scanning will be disabled.
 * @param audiobooksOnly Whether the library should ignore ebook files and only allow ebook files to be supplementary.
 * @param hideSingleBookSeries Whether to hide series with only one book.
 * @param onlyShowLaterBooksInContinueSeries Whether to only show books in a series after the highest series sequence.
 * @param metadataPrecedence The precedence of metadata sources. See Metadata Providers for a list of possible providers.
 * @param podcastSearchRegion The region to use when searching for podcasts.
 */
@Serializable

data class LibrarySettings (

    /* Whether the library should use square book covers. Must be 0 (for false) or 1 (for true). */
    @SerialName(value = "coverAspectRatio")
    val coverAspectRatio: kotlin.Int? = null,

    /* Whether to disable the folder watcher for the library. */
    @SerialName(value = "disableWatcher")
    val disableWatcher: kotlin.Boolean? = null,

    /* Whether to skip matching books that already have an ASIN. */
    @SerialName(value = "skipMatchingMediaWithAsin")
    val skipMatchingMediaWithAsin: kotlin.Boolean? = null,

    /* Whether to skip matching books that already have an ISBN. */
    @SerialName(value = "skipMatchingMediaWithIsbn")
    val skipMatchingMediaWithIsbn: kotlin.Boolean? = null,

    /* The cron expression for when to automatically scan the library folders. If null, automatic scanning will be disabled. */
    @SerialName(value = "autoScanCronExpression")
    val autoScanCronExpression: kotlin.String? = null,

    /* Whether the library should ignore ebook files and only allow ebook files to be supplementary. */
    @SerialName(value = "audiobooksOnly")
    val audiobooksOnly: kotlin.Boolean? = null,

    /* Whether to hide series with only one book. */
    @SerialName(value = "hideSingleBookSeries")
    val hideSingleBookSeries: kotlin.Boolean? = null,

    /* Whether to only show books in a series after the highest series sequence. */
    @SerialName(value = "onlyShowLaterBooksInContinueSeries")
    val onlyShowLaterBooksInContinueSeries: kotlin.Boolean? = null,

    /* The precedence of metadata sources. See Metadata Providers for a list of possible providers. */
    @SerialName(value = "metadataPrecedence")
    val metadataPrecedence: kotlin.collections.List<kotlin.String>? = null,

    /* The region to use when searching for podcasts. */
    @SerialName(value = "podcastSearchRegion")
    val podcastSearchRegion: kotlin.String? = null

) {


}

